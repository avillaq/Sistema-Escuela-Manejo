name: Tareas Programadas

on:
  schedule:
    - cron: '0 7 * * 0'   # Cada domingo 2AM
    - cron: '0 11 * * *'  # Cada dia 6AM
  workflow_dispatch:

jobs:
  mantenimiento:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 7 * * 0' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Despertar Servidor
      run: |
        echo "Despertando servidor..."
        if curl --max-time 60 --connect-timeout 30 -L -f "${{ secrets.API_URL }}"; then
          echo "✓ Servidor respondiendo correctamente"
        else
          echo "⚠ Servidor iniciando, esperando..."
          sleep 10
        fi

    - name: Despertar Base de Datos
      run: |
        echo "Verificando conexión a base de datos..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -w "%{http_code}" -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.API_URL }}/admin-tareas/despertar-bd")
        
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
          echo "✓ Base de datos conectada"
        else
          echo "✗ Error conectando a BD (código: $http_code)"
          echo "Respuesta: ${response}"
          exit 1
        fi
    
    - name: Generar Bloques
      run: |
        echo "Generando bloques para próximas 2 semanas..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"semanas": 2}' \
          "${{ secrets.API_URL }}/admin-tareas/generar-bloques")
        
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✓ Bloques generados"
        else
          echo "✗ Error generando bloques"
          echo "Respuesta: $response"
          exit 1
        fi
    
    - name: Limpiar Bloques
      run: |
        echo "Limpiando bloques obsoletos..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.API_URL }}/admin-tareas/limpiar-bloques")
        
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✓ Bloques eliminados"
        else
          echo "✗ Error limpiando bloques"
          echo "Respuesta: $response"
          exit 1
        fi

  recordatorios-diarios:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 11 * * *' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Despertar Servidor
      run: |
        echo "Verificando disponibilidad del servidor..."
        if curl --max-time 60 --connect-timeout 30 -L -f "${{ secrets.API_URL }}"; then
          echo "✓ Servidor disponible"
        else
          echo "⚠ Servidor iniciando, reintentando..."
          sleep 10
        fi

    - name: Despertar Base de Datos
      run: |
        echo "Activando conexión a base de datos..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -w "%{http_code}" -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.API_URL }}/admin-tareas/despertar-bd")
        
        http_code="${response: -3}"
        if [ "$http_code" = "200" ]; then
          echo "✓ Base de datos activa"
        else
          echo "✗ Error activando BD (código: $http_code)"
        fi

    - name: Enviar Recordatorios de Reservas
      run: |
        echo "Enviando recordatorios de clases para hoy..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.API_URL }}/admin-tareas/enviar-recordatorio-reserva")
        
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✓ Recordatorios enviados"
        else
          echo "✗ Error enviando recordatorios de reservas"
          echo "Respuesta: $response"
        fi
        
    - name: Enviar Recordatorios de Pagos Pendientes
      run: |
        echo "Enviando recordatorios de pagos pendientes..."
        response=$(curl --max-time 60 --connect-timeout 15 -s -L -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.API_URL }}/admin-tareas/enviar-pagos-pendientes")
        
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✓ Recordatorios de pago enviados"
        else
          echo "✗ Error enviando recordatorios de pagos"
          echo "Respuesta: $response"
        fi